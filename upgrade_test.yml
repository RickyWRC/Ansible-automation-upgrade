---
- name: Gather information from Juniper device
  hosts: mx
  connection: local
  gather_facts: no
  vars:
    ansible_host: "192.168.72.14"
    ansible_user: "admin"
    ansible_password: "PACnms123"
    ftp_user: "venkatag"
    ftp_password: "PACnms123"
    ftp_server: "192.168.72.192"
    ftp_directory: "/test/ansible_automation/"
    routing_instance: "mgmt_junos"
    version_file: "filename_version"
    hardware_file: "filename_hardware"
    environment_file: "filename_environment"
    configuration_file: "filename_configuration"
    interfaces_file: "filename_interfaces"
    bgp_file: "filename_bgp"
    isis_file: "filename_isis"
    ospf_file: "filename_ospf"
    vrrp_file: "filename_vrrp"
    storage_file: "filename_storage"
    target_file: "junos-srxhe-x86-64-21.4R3-S5.4.tgz"

  tasks:
    - name: Get software version
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show version | save {{ version_file }}"
      register: junos_result

    - name: Print response
      debug:
        var: "junos_result"

    - name: Log the Hardware Version Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show chassis hardware | save {{ hardware_file }}"
      register: junos_result_hardware

    - name: Print Hardware Version response
      debug:
        var: "junos_result_hardware"

    - name: Log the Chassis Environment Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show chassis environment | save {{ environment_file }}"
      register: junos_result_environment

    - name: Print Chassis Environment response
      debug:
        var: "junos_result_environment"

    - name: Log the Active Configuration
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show configuration | save {{ configuration_file }}"
      register: junos_result_configuration

    - name: Print Active Configuration response
      debug:
        var: "junos_result_configuration"

    - name: Log the Interfaces on the Router
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show interface terse | save {{ interfaces_file }}"
      register: junos_result_interfaces

    - name: Print Interfaces response
      debug:
        var: "junos_result_interfaces"

    - name: Log the BGP Adjacency Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show bgp summary | save {{ bgp_file }}"
      register: junos_result_bgp

    - name: Print BGP Adjacency response
      debug:
        var: "junos_result_bgp"

    - name: Log the IS-IS Adjacency Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show isis adjacency brief | save {{ isis_file }}"
      register: junos_result_isis

    - name: Print IS-IS Adjacency response
      debug:
        var: "junos_result_isis"

    - name: Log the OSPF Adjacency Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show ospf neighbor instance all | save {{ ospf_file }}"
      register: junos_result_ospf

    - name: Print OSPF Adjacency response
      debug:
        var: "junos_result_ospf"

    - name: Log the VRRP Adjacency Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show vrrp summary | save {{ vrrp_file }}"
      register: junos_result_vrrp

    - name: Print VRRP Adjacency response
      debug:
        var: "junos_result_vrrp"

    - name: Log the System Storage Information
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "show system storage | save {{ storage_file }}"
      register: junos_result_storage

    - name: Print System Storage response
      debug:
        var: "junos_result_storage"
        
# Step 5-1: Waiting
    - name: Wait for 15 seconds after saving logs
      pause:
        seconds: 15

# Step 3 remote save to ftp
    - name: Set files to copy to FTP
      set_fact:
        files_to_copy:
          - "/var/home/admin/{{ version_file }}"
          - "/var/home/admin/{{ hardware_file }}"
          - "/var/home/admin/{{ environment_file }}"
          - "/var/home/admin/{{ configuration_file }}"
          - "/var/home/admin/{{ interfaces_file }}"
          - "/var/home/admin/{{ bgp_file }}"
          - "/var/home/admin/{{ isis_file }}"
          - "/var/home/admin/{{ ospf_file }}"
          - "/var/home/admin/{{ vrrp_file }}"
          - "/var/home/admin/{{ storage_file }}"    

    - name: Save to ftp     
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "file copy {{ item }} ftp://{{ ftp_user }}:{{ ftp_password }}@{{ ftp_server }}{{ ftp_directory }} routing-instance {{ routing_instance }}"
      loop: "{{ files_to_copy }}"
      register: junos_ftp
    - name: Print save to ftp response
      debug:
        var: "junos_ftp" 

    - name: request snapshot
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "request system snapshot"
      register: junos_snapshot
    - name: Print save to ftp response
      debug:
        var: "junos_snapshot"        
       
# Step 5-2: Waiting
    - name: Wait for 30 seconds after the backup
      pause:
        seconds: 30
        
# Step 4: Load the target file into the device
    - name: Load the target file into the device
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "file copy ftp://{{ ftp_user }}:{{ ftp_password }}@{{ ftp_server }}{{ ftp_directory }}/{{ target_file }} /var/tmp/{{ target_file }} routing-instance {{ routing_instance }}"
      register: load_target_file

    - name: Print the target file response
      debug:
        var: "load_target_file"

# Step 5-3: Waiting
    - name: Wait for 10 minutes after loading the target file
      pause:
        minutes: 10


# Step 6: Validating the install
    - name: Validate the install
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "request vmhost software validate /var/tmp/{{ target_file }}"
      register: validate_install

    - name: Print validation response
      debug:
        var: validate_install

    - name: Check validation result
      assert:
        that:
          - "'Validation succeeded' in validate_install.stdout"
        fail_msg: "Validation failed."

# Step 7: Upgrading
    - name: Upgrade the software
      shell: |
        sshpass -p '{{ ansible_password }}' ssh -o StrictHostKeyChecking=no {{ ansible_user }}@{{ ansible_host }} "request vmhost software add /var/tmp/{{ target_file }} no-validate reboot"
      register: upgrade_result

    - name: Print upgrade response
      debug:
        var: upgrade_result
